// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wall_Net.DataAccess;

#nullable disable

namespace Wall_Net.Migrations
{
    [DbContext(typeof(WallNetDbContext))]
    partial class WallNetDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Wall_Net.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<decimal>("Money")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("UserId1");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2023, 11, 26, 15, 53, 49, 901, DateTimeKind.Local).AddTicks(2039),
                            IsBlocked = false,
                            Money = 1000m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2023, 11, 26, 15, 53, 49, 901, DateTimeKind.Local).AddTicks(2068),
                            IsBlocked = false,
                            Money = 1000m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2023, 11, 26, 15, 53, 49, 901, DateTimeKind.Local).AddTicks(2071),
                            IsBlocked = false,
                            Money = 1000m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2023, 11, 26, 15, 53, 49, 901, DateTimeKind.Local).AddTicks(2073),
                            IsBlocked = false,
                            Money = 1000m,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2023, 11, 26, 15, 53, 49, 901, DateTimeKind.Local).AddTicks(2075),
                            IsBlocked = false,
                            Money = 1000m,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTime(2023, 11, 26, 15, 53, 49, 901, DateTimeKind.Local).AddTicks(2078),
                            IsBlocked = false,
                            Money = 1000m,
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTime(2023, 11, 26, 15, 53, 49, 901, DateTimeKind.Local).AddTicks(2080),
                            IsBlocked = false,
                            Money = 1000m,
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            CreationDate = new DateTime(2023, 11, 26, 15, 53, 49, 901, DateTimeKind.Local).AddTicks(2082),
                            IsBlocked = false,
                            Money = 1000m,
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            CreationDate = new DateTime(2023, 11, 26, 15, 53, 49, 901, DateTimeKind.Local).AddTicks(2084),
                            IsBlocked = false,
                            Money = 1000m,
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            CreationDate = new DateTime(2023, 11, 26, 15, 53, 49, 901, DateTimeKind.Local).AddTicks(2086),
                            IsBlocked = false,
                            Money = 1000m,
                            UserId = 10
                        });
                });

            modelBuilder.Entity("Wall_Net.Models.Catalogue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Points")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Catalogues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "imagen1.jpg",
                            Points = 100m,
                            ProductDescription = "Producto 1"
                        },
                        new
                        {
                            Id = 2,
                            Image = "imagen2.jpg",
                            Points = 90m,
                            ProductDescription = "Producto 2"
                        },
                        new
                        {
                            Id = 3,
                            Image = "imagen3.jpg",
                            Points = 80m,
                            ProductDescription = "Producto 3"
                        },
                        new
                        {
                            Id = 4,
                            Image = "imagen4.jpg",
                            Points = 70m,
                            ProductDescription = "Producto 4"
                        });
                });

            modelBuilder.Entity("Wall_Net.Models.FixedTermDeposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("closing_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("creation_date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("nominalRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("UserId");

                    b.ToTable("FixedTerms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            UserId = 1,
                            amount = 100m,
                            closing_date = new DateTime(2001, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            creation_date = new DateTime(2001, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            nominalRate = 12m,
                            state = "Inmovilizado"
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 2,
                            UserId = 2,
                            amount = 150m,
                            closing_date = new DateTime(2023, 11, 26, 15, 53, 49, 901, DateTimeKind.Local).AddTicks(2168),
                            creation_date = new DateTime(2001, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            nominalRate = 5m,
                            state = "Activo"
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 3,
                            UserId = 2,
                            amount = 200m,
                            closing_date = new DateTime(2023, 11, 26, 15, 53, 49, 901, DateTimeKind.Local).AddTicks(2171),
                            creation_date = new DateTime(2001, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            nominalRate = 12m,
                            state = "Activo"
                        },
                        new
                        {
                            Id = 4,
                            AccountId = 4,
                            UserId = 1,
                            amount = 250m,
                            closing_date = new DateTime(2008, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            creation_date = new DateTime(2007, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            nominalRate = 17m,
                            state = "Invomilizado"
                        });
                });

            modelBuilder.Entity("Wall_Net.Models.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Encargado de agregar y borrar usuarios",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Cliente nuevo",
                            Name = "Regular"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Administrador de las transacciones",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Cliente antiguo",
                            Name = "Regular"
                        });
                });

            modelBuilder.Entity("Wall_Net.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Concept")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ToAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            TransactionId = 1,
                            AccountId = 1,
                            Amount = 100.00m,
                            Concept = "Ejemplo de transacción 1",
                            Date = new DateTime(2023, 11, 26, 15, 53, 49, 901, DateTimeKind.Local).AddTicks(2370),
                            Type = "topup",
                            UserId = 1
                        },
                        new
                        {
                            TransactionId = 2,
                            AccountId = 1,
                            Amount = 100.00m,
                            Concept = "Ejemplo de transacción 1",
                            Date = new DateTime(2023, 11, 26, 15, 53, 49, 901, DateTimeKind.Local).AddTicks(2381),
                            Type = "topup",
                            UserId = 1
                        },
                        new
                        {
                            TransactionId = 3,
                            AccountId = 1,
                            Amount = 100.00m,
                            Concept = "Ejemplo de transacción 1",
                            Date = new DateTime(2023, 11, 26, 15, 53, 49, 901, DateTimeKind.Local).AddTicks(2383),
                            Type = "topup",
                            UserId = 1
                        },
                        new
                        {
                            TransactionId = 4,
                            AccountId = 1,
                            Amount = 100.00m,
                            Concept = "Ejemplo de transacción 1",
                            Date = new DateTime(2023, 11, 26, 15, 53, 49, 901, DateTimeKind.Local).AddTicks(2385),
                            Type = "topup",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Wall_Net.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Points")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Rol_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 0,
                            Email = "lean@email.com",
                            FirstName = "Leandro",
                            LastName = "Mumbach",
                            Password = "$2a$11$X5qBa1KRf1.qjpalBQQhW.c6LOJBIMfPK2tvI1Gt5BPphHXH1SAJu",
                            Points = 20m,
                            Rol_Id = 1
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 0,
                            Email = "pepe@email.com",
                            FirstName = "Pepe",
                            LastName = "Gonzalez",
                            Password = "$2a$11$AnXoudaQAy9D4XKtWYifG.AqdVBqBIglqC77ierLTk6LWxfhf1V7W",
                            Points = 20m,
                            Rol_Id = 1
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 0,
                            Email = "ana@email.com",
                            FirstName = "Ana",
                            LastName = "Lopez",
                            Password = "$2a$11$Iz7guIzRTLTVEhoOnwtrGePz1sae4bt/M4hySWMkie6zBUvcIQz7e",
                            Points = 25m,
                            Rol_Id = 2
                        },
                        new
                        {
                            Id = 4,
                            AccountId = 0,
                            Email = "carlos@email.com",
                            FirstName = "Carlos",
                            LastName = "Martinez",
                            Password = "$2a$11$2/qCK0I44CahYZUwTPKTIO8UtdOspcJRphgT8UcI.4g5yYymDJ1vy",
                            Points = 18m,
                            Rol_Id = 1
                        },
                        new
                        {
                            Id = 5,
                            AccountId = 0,
                            Email = "maria@email.com",
                            FirstName = "Maria",
                            LastName = "Rodriguez",
                            Password = "$2a$11$dMkPDgpmDE92gB2Bt5Ht7ubbGT44zej.DoqBMkazBNs7j1OMcOTim",
                            Points = 22m,
                            Rol_Id = 2
                        },
                        new
                        {
                            Id = 6,
                            AccountId = 0,
                            Email = "juan@email.com",
                            FirstName = "Juan",
                            LastName = "Perez",
                            Password = "$2a$11$as.leZ/p5ges2ZyHJncxoefCiPuLpXjOtc3R9rfBkwJG28bjmFs36",
                            Points = 19m,
                            Rol_Id = 1
                        },
                        new
                        {
                            Id = 7,
                            AccountId = 0,
                            Email = "laura@email.com",
                            FirstName = "Laura",
                            LastName = "Fernandez",
                            Password = "$2a$11$3W2eyjk8O.OIKwnP2IufaOg3fGunnrVSAaD7Wg5C6YpEawGTRO9Yq",
                            Points = 24m,
                            Rol_Id = 2
                        },
                        new
                        {
                            Id = 8,
                            AccountId = 0,
                            Email = "diego@email.com",
                            FirstName = "Diego",
                            LastName = "Gomez",
                            Password = "$2a$11$VawppQGAMCR0uRUlKZGPjOOgmTC3cAR9FopQsZdmp2IJbl5Hd.Cou",
                            Points = 21m,
                            Rol_Id = 1
                        },
                        new
                        {
                            Id = 9,
                            AccountId = 0,
                            Email = "carmen@email.com",
                            FirstName = "Carmen",
                            LastName = "Ruiz",
                            Password = "$2a$11$sNy1QTR/SRok.uqNQw1ql.dLRsLU26sujKu0zpzTlg4c.fMTUZv4q",
                            Points = 20m,
                            Rol_Id = 2
                        },
                        new
                        {
                            Id = 10,
                            AccountId = 0,
                            Email = "sergio@email.com",
                            FirstName = "Sergio",
                            LastName = "Lopez",
                            Password = "$2a$11$kjmJJExX3OOvMfVO8yf8LeDDCIuJi/g721zvUZ5x8Q2eNbGgRADga",
                            Points = 23m,
                            Rol_Id = 1
                        },
                        new
                        {
                            Id = 11,
                            AccountId = 0,
                            Email = "luisa@email.com",
                            FirstName = "Luisa",
                            LastName = "Garcia",
                            Password = "$2a$11$VBftwPhigXWliMwYSBAzz.RnkyKFxKv.P9Fw6LiC56igpfFLT/6Qu",
                            Points = 19m,
                            Rol_Id = 2
                        },
                        new
                        {
                            Id = 12,
                            AccountId = 0,
                            Email = "alejandro@email.com",
                            FirstName = "Alejandro",
                            LastName = "Sanchez",
                            Password = "$2a$11$5ABrqY8dMVr6GtNNf71dVeMrNQsFjamSQz/a6iHVtZRKp3yDi.xv6",
                            Points = 18m,
                            Rol_Id = 1
                        },
                        new
                        {
                            Id = 13,
                            AccountId = 0,
                            Email = "martina@email.com",
                            FirstName = "Martina",
                            LastName = "Hernandez",
                            Password = "$2a$11$i65pPFRai94ETwKlrx43iO7tTBIsEvIpLin/CwQAGUtlhsBqcaOpm",
                            Points = 22m,
                            Rol_Id = 2
                        },
                        new
                        {
                            Id = 14,
                            AccountId = 0,
                            Email = "roberto@email.com",
                            FirstName = "Roberto",
                            LastName = "Diaz",
                            Password = "$2a$11$6mQOc49hzeG0.v89YiDF2e7oNSILrk/j/iyXwYYgWipRGEIW5ez0S",
                            Points = 25m,
                            Rol_Id = 1
                        },
                        new
                        {
                            Id = 15,
                            AccountId = 0,
                            Email = "isabel@email.com",
                            FirstName = "Isabel",
                            LastName = "Flores",
                            Password = "$2a$11$DQ6xRrDmu8G8XdT/4/h9hevdx3YGoAlSvyqbWObI2ZHxIa0jiRohG",
                            Points = 20m,
                            Rol_Id = 2
                        });
                });

            modelBuilder.Entity("Wall_Net.Models.Account", b =>
                {
                    b.HasOne("Wall_Net.Models.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("Wall_Net.Models.Account", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Wall_Net.Models.User", null)
                        .WithMany("Accounts")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wall_Net.Models.FixedTermDeposit", b =>
                {
                    b.HasOne("Wall_Net.Models.Account", "Account")
                        .WithMany("FixedTermDeposit")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wall_Net.Models.User", "User")
                        .WithMany("FixedTermDeposits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wall_Net.Models.Transaction", b =>
                {
                    b.HasOne("Wall_Net.Models.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Wall_Net.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wall_Net.Models.Account", b =>
                {
                    b.Navigation("FixedTermDeposit");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Wall_Net.Models.User", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("Accounts");

                    b.Navigation("FixedTermDeposits");
                });
#pragma warning restore 612, 618
        }
    }
}
